import express from 'express';
import bodyParser from 'body-parser';
import dotenv from 'dotenv';
import Botly from 'botly';
dotenv.config();

const app = express();
const PageID = "359211540615525";
let userBoards = {};
let gameSessions = {};
const player1 = '‚ùå';
const player2 = '‚ö™';
const computer = '‚ö™'; 
/*--------- page database ---------*/
const botly = new Botly({
  accessToken: 'EAAVL9kMAiqQBOzXPhCfYdfrSSC1NnKhsZC6tHCEOMMQUJ2MieQClVx5Or7mDSJbbSjSz3rjI9X8sbgncUFdiZCIOcZCTiOaZCcNluU2FYoNwp0V5fqZBPoBdOZB3lYZAcDFGZBOrNc05Ktb9oW8vsJWElQAH6pBsLJtzIl8z20x6z5g08lLE50UPBRy3YiyqWhrNbgZDZD',
  verifyToken: '12345678',
  webHookPath: process.env.WB_PATH,
  notificationType: Botly.CONST.REGULAR,
  FB_URL: "https://graph.facebook.com/v18.0/",
});

/*--------- Functions ---------*/
app.get("/", function (_req, res) {
  res.sendStatus(200);
});
app.use(
  bodyParser.json({
    verify: botly.getVerifySignature('d697b070c3c06ef0a2923276dd69c0b7'),
  })
);
app.use(bodyParser.urlencoded({ extended: false }));
app.use("/webhook", botly.router());

function generateInviteCode() {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = 'MOROCCOAI';
  for (let i = 0; i < 8; i++) {
    result += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return result;
}



function initBoard() {
  return ['  1  ','  2  ','  3  ','  4  ','  5  ','  6  ','  7  ','  8  ','  9  '];
}

function printBoard(board) {
  return `
    ${board[0]} | ${board[1]} | ${board[2]}
    ---------------------
    ${board[3]} | ${board[4]} | ${board[5]}
    ---------------------
    ${board[6]} | ${board[7]} | ${board[8]}
  `;
}

function makeMove(board, position, symbol) {
  const pos = position - 1;
  if (board[pos] !== ` ${player1}` && board[pos] !== ` ${player2}` && board[pos] !== ` ${computer}`) {
    board[pos] = ` ${symbol}`;
    return true;
  }
  return false;
}

function checkWin(board, symbol) {
  const winConditions = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows
    [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns
    [0, 4, 8], [2, 4, 6] // Diagonals
  ];
  return winConditions.some(condition =>
    condition.every(index => board[index] === ` ${symbol}`)
  );
}

function checkDraw(board) {
  return board.every(cell => cell === ` ${player1}` || cell === ` ${player2}`);
}

function startGame(senderId) {
  userBoards[senderId] = initBoard();
  botly.sendText({
    id: senderId,
    text: `ŸÑŸÜÿ®ÿØÿ£ ÿßŸÑŸÑÿπÿ® üòè!\n${printBoard(userBoards[senderId])}\nÿ≠ÿßŸÜ ÿØŸàÿ±ŸÉ! (ÿßÿÆÿ™ÿ± ÿ®ŸäŸÜ 1-9)`
  });
}

function endGame(senderId, message) {
  botly.sendText({
    id: senderId,
    text: `ÿßŸÜÿ™Ÿáÿ™ ÿßŸÑŸÑÿπÿ®ÿ© üòâ\n${printBoard(userBoards[senderId])}\n${message}`
  }, function() {
    setTimeout(() => {
      botly.sendText({
        id: senderId,
        text: 'ŸäŸÖŸÉŸÜŸÉ ÿßÿπÿßÿØÿ© ÿßŸÑŸÑÿπÿ®',
        quick_replies: [
          botly.createQuickReply('ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿßŸÑÿ®Ÿàÿ™', 'RESTART'),
          botly.createQuickReply('ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿµÿØŸäŸÇ', 'INVITE_FRIEND')
        ]
      });
    }, 1000); 
  });
  delete userBoards[senderId];
}

function computerMove(board, player1Move) {
  const emptyPositions = board
    .map((value, index) => (value !== ` ${player1}` && value !== ` ${computer}` ? index + 1 : null))
    .filter(value => value !== null);

  if (emptyPositions.length === 0) return null;

  const winningMove = emptyPositions.find(position => {
    const testBoard = [...board];
    makeMove(testBoard, position, computer);
    const win = checkWin(testBoard, computer);
    return win;
  });

  if (winningMove) return winningMove;

  const blockingMove = emptyPositions.find(position => {
    const testBoard = [...board];
    makeMove(testBoard, position, player1);
    const block = checkWin(testBoard, player1);
    return block;
  });

  if (blockingMove) return blockingMove;


  const strategicMove = findStrategicMove(board, emptyPositions);
  if (strategicMove) return strategicMove;

  return emptyPositions[Math.floor(Math.random() * emptyPositions.length)];
}


function findStrategicMove(board, emptyPositions) {
  const cornerPositions = [1, 3, 7, 9];
  const edgePositions = [2, 4, 6, 8];


  if (emptyPositions.includes(5)) return 5;

  const preferredCorners = emptyPositions.filter(pos => cornerPositions.includes(pos));
  if (preferredCorners.length > 0) return preferredCorners[0];

  const preferredEdges = emptyPositions.filter(pos => edgePositions.includes(pos));
  if (preferredEdges.length > 0) return preferredEdges[0];

  return null;
}



function handlePlayerMove(senderId, move) {
  let board = userBoards[senderId];
  if (makeMove(board, move, player1)) {
    if (checkWin(board, player1)) {
      endGame(senderId, 'Ÿáÿ≤ŸÖÿ™ŸÜŸä üôÑÿå ÿßŸÑŸÖÿ±ÿ© ÿßŸÑŸÇÿßÿØŸÖÿ© ÿ≥ÿ£Ÿáÿ≤ŸÖŸÉüòè!');
      return;
    } else if (checkDraw(board)) {
      endGame(senderId, "ÿ™ÿπÿßÿØŸÑ üòÇÿå ŸÑÿπÿ®ÿ© ÿ¨ŸäÿØÿ© ŸÑŸÜÿπÿØŸáÿß ‚ù§Ô∏è");
      return;
    }

    let computerMovePosition = computerMove(board, move);
    if (computerMovePosition) {
      makeMove(board, computerMovePosition, computer);
      if (checkWin(board, computer)) {
        endGame(senderId, 'Ÿáÿ≤ŸÖÿ™ŸÉ üòÇÿå ÿ≠ÿßŸàŸÑ ÿßŸÑŸÖÿ±ÿ© ÿßŸÑŸÇÿßÿØŸÖÿ© ÿßŸÜ ÿ™Ÿáÿ≤ŸÖŸÜŸäüòâ');
      } else if (checkDraw(board)) {
        endGame(senderId, "ÿ™ÿπÿßÿØŸÑ üòÇÿå ŸÑÿπÿ®ÿ© ÿ¨ŸäÿØÿ© ŸÑŸÜÿπÿØŸáÿß ‚ù§Ô∏è");
      } else {
        botly.sendText({
          id: senderId,
          text: `ÿ≥ÿ£ÿÆÿ™ÿßÿ± ÿßŸÑŸÖŸÉÿßŸÜ ${computerMovePosition}\n${printBoard(board)}\nÿ≠ÿßŸÜ ÿØŸàÿ±ŸÉ! (ÿ•ÿÆÿ™ÿ± ÿ®ŸäŸÜ 1-9)`
        });
      }
    } else {
      botly.sendText({
        id: senderId,
        text: 'ÿ≠ÿØÿ´ ŸÑŸä ÿÆÿ∑ÿ£ ÿ®ÿ≠Ÿäÿ´ ŸÑŸÖ ÿßÿ™ŸÖŸÉŸÜ ŸÖŸÜ ÿßÿÆÿ™Ÿäÿßÿ± ŸÖŸÉÿßŸÜ ü•∫'
      });
    }
  } else {
    botly.sendText({
      id: senderId,
      text: 'ÿßŸÑŸÖŸÉÿßŸÜ ŸÖÿ≠ÿØÿØ ŸÖÿ≥ÿ®ŸÇÿß, ÿ≠ÿßŸàŸÑ ÿ™ÿ≠ÿØŸäÿØ ŸÖŸÉÿßŸÜ ÿßÿÆÿ±! (ÿ•ÿÆÿ™ÿ± ÿ®ŸäŸÜ 1-9)'
    });
  }
}


function handleMultiplayerMove(sessionId, player, move) {
  const session = gameSessions[sessionId];
  const board = session.board;
  const currentPlayer = player === session.player1 ? player1 : player2;

  if (makeMove(board, move, currentPlayer)) {
    const nextPlayer = player === session.player1 ? session.player2 : session.player1;

    if (checkWin(board, currentPlayer)) {
      botly.sendText({
        id: session.player1,
        text: `ÿßŸàŸàŸá ŸÉÿßŸÜÿ™ ŸÑÿπÿ®ÿ© ÿ¨ŸäÿØÿ© ÿ®ŸäŸÜŸÉŸÖÿß üòâ\n${printBoard(board)}\n${currentPlayer === player1 ? 'ÿßŸÜÿ™ ÿßŸÑŸÅÿßÿ¶ÿ≤ ü•≥!' : 'ÿµÿØŸäŸÇŸÉ ÿßŸÑŸÅÿßÿ¶ÿ≤ ü•≥!'}`
      });
      botly.sendText({
        id: session.player2,
        text: `ÿßŸàŸàŸá ŸÉÿßŸÜÿ™ ŸÑÿπÿ®ÿ© ÿ¨ŸäÿØÿ© ÿ®ŸäŸÜŸÉŸÖÿß üòâ\n${printBoard(board)}\n${currentPlayer === player1 ? 'ÿµÿØŸäŸÇŸÉ ÿßŸÑŸÅÿßÿ¶ÿ≤ ü•≥!' : 'ÿßŸÜÿ™ ÿßŸÑŸÅÿßÿ¶ÿ≤ ü•≥!'}`
      });
      endMultiplayerGame(sessionId);
    } else if (checkDraw(board)) {
      botly.sendText({
        id: session.player1,
        text: `ÿßŸàŸàŸá ŸÉÿßŸÜÿ™ ŸÑÿπÿ®ÿ© ÿ¨ŸäÿØÿ© ÿ®ŸäŸÜŸÉŸÖÿß üòâ\n${printBoard(board)}\nÿ™ÿπÿßÿØŸÑ üòÇ!`
      });
      botly.sendText({
        id: session.player2,
        text: `ÿßŸàŸàŸá ŸÉÿßŸÜÿ™ ŸÑÿπÿ®ÿ© ÿ¨ŸäÿØÿ© ÿ®ŸäŸÜŸÉŸÖÿß üòâ\n${printBoard(board)}\nÿ™ÿπÿßÿØŸÑ üòÇ!`
      });
      endMultiplayerGame(sessionId);
    } else {
      botly.sendText({
        id: session.player1,
        text: ` ÿ±ŸÉÿ≤ ÿ¨ŸäÿØÿß ‚ù§Ô∏è\n${printBoard(board)}\n${nextPlayer === session.player1 ? 'ÿ≠ÿßŸÜ ÿØŸàÿ±ŸÉ! ( ÿ•ÿÆÿ™ÿ± ÿ®ŸäŸÜ 1-9)' : 'ŸÅŸä ÿ•ŸÜÿ™ÿ∏ÿßÿ± ÿßŸÜ ŸäŸÑÿπÿ® ÿµÿØŸäŸÇŸÉ ...'}`
      });
      botly.sendText({
        id: session.player2,
        text: `ÿ£ÿ´ŸÇ ŸÅŸä ŸÇÿØÿ±ÿßÿ™ŸÉ\n${printBoard(board)}\n${nextPlayer === session.player2 ? 'ÿ≠ÿßŸÜ ÿØŸàÿ±ŸÉ! (ÿ•ÿÆÿ™ÿ± ÿ®ŸäŸÜ 1-9)' : 'ŸÅŸä ÿ•ŸÜÿ™ÿ∏ÿßÿ± ÿ£ŸÜ ŸäŸÑÿπÿ® ÿµÿØŸäŸÇŸÉ...'}`
      });
      session.currentPlayer = nextPlayer;
    }
  } else {
    botly.sendText({
      id: player,
      text: 'ÿßŸÑŸÖŸÉÿßŸÜ ŸÖÿ≠ÿØÿØ ŸÖÿ≥ÿ®ŸÇÿßÿå ÿ≠ÿØÿØ ŸÖŸÉÿßŸÜÿß ÿßÿÆÿ±! (ÿ•ÿÆÿ™ÿ± ÿ®ŸäŸÜ 1-9)'
    });
  }
}

function endMultiplayerGame(sessionId) {
  const session = gameSessions[sessionId];
  delete gameSessions[sessionId];
  setTimeout(() => {
    botly.sendText({
      id: session.player1,
      text: 'ÿ•ŸÜÿ™Ÿáÿ™ ÿßŸÑŸÑÿπÿ®ÿ©ÿå ŸäŸÖŸÉŸÜŸÉ ÿ®ÿØÿ£ ŸÑÿπÿ®ÿ© ÿ¨ÿØŸäÿØÿ© ÿπÿ®ÿ± ÿßÿÆÿ™Ÿäÿßÿ± ÿßÿ≠ÿØ ÿßŸÑÿßÿ≤ÿ±ÿßÿ±',
      quick_replies: [
        botly.createQuickReply('ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿßŸÑÿ®Ÿàÿ™', 'RESTART'),
        botly.createQuickReply('ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿµÿØŸäŸÇ', 'INVITE_FRIEND')
      ]
    });
    botly.sendText({
      id: session.player2,
      text: 'ÿ•ŸÜÿ™Ÿáÿ™ ÿßŸÑŸÑÿπÿ®ÿ©ÿå ŸäŸÖŸÉŸÜŸÉ ÿ®ÿØÿ£ ŸÑÿπÿ®ÿ© ÿ¨ÿØŸäÿØÿ© ÿπÿ®ÿ± ÿßÿÆÿ™Ÿäÿßÿ± ÿßÿ≠ÿØ ÿßŸÑÿßÿ≤ÿ±ÿßÿ±',
      quick_replies: [
        botly.createQuickReply('ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿßŸÑÿ®Ÿàÿ™', 'RESTART'),
        botly.createQuickReply('ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿµÿØŸäŸÇ', 'INVITE_FRIEND')
                                     ]
                                   });
                                 }, 1000); // Wait 1 second before sending the button
 }
function invalidateInviteCode(sessionId) {
  const session = gameSessions[sessionId];
  if (session && session.player2 === null) {
    delete gameSessions[sessionId];
   botly.sendText({
        id: session.player1,
        text: 'ÿßŸÜÿ™Ÿáÿ™ ÿµŸÑÿßÿ≠Ÿäÿ© ŸÉŸàÿØ ÿßŸÑÿØÿπŸàÿ© \n ŸäŸÖŸÉŸÜŸÉ ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿßŸÑÿ®Ÿàÿ™ ÿßŸà ŸÖÿπ ÿµÿØŸäŸÇ ŸÖÿ¨ÿØÿØÿß',
        quick_replies: [
          botly.createQuickReply('ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿßŸÑÿ®Ÿàÿ™', 'RESTART'),
          botly.createQuickReply('ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿµÿØŸäŸÇ', 'INVITE_FRIEND')
        ]
      });
  }
}

      botly.on("message", async (senderId, message, data) => {
     botly.sendAction({id: senderId, action: Botly.CONST.ACTION_TYPES.MARK_SEEN});
                                 botly.sendAction({id: senderId, action: Botly.CONST.ACTION_TYPES.TYPING_ON});

     if (message.message.text) {
     const text = message.message.text.trim();
     if (userBoards[senderId]) {
     const move = parseInt(text);
     if (!isNaN(move) && move >= 1 && move <= 9) {
                                       handlePlayerMove(senderId, move);
                                     } else {
     botly.sendText({
      id: senderId,
      text: 'ÿßŸÑÿ±ÿ¨ÿßÿ° ÿßÿÆÿ™Ÿäÿßÿ± ÿ®ŸäŸÜ 1 ÿßŸÑŸâ 9 ŸÅŸÇÿ∑ üò† '
       });
        }
        } else if (Object.values(gameSessions).some(session => session.player1 === senderId || session.player2 === senderId)) {
      const sessionId = Object.keys(gameSessions).find(id => gameSessions[id].player1 === senderId || gameSessions[id].player2 === senderId);
      const session = gameSessions[sessionId];
  //
       if (session.player2 === null) {
         botly.sendText({
           id: senderId,
           text: 'ŸÑÿß ÿ™ÿ±ÿ≥ŸÑ ÿ¥Ÿäÿ° ÿ≠ÿ™Ÿâ ŸäÿØÿÆŸÑ ÿµÿØŸäŸÇŸÉ üò†\n ÿßÿ±ÿ≥ŸÑ ŸÑŸá ŸÉŸàÿØ ÿßŸÑÿØÿπŸàÿ© ŸÑŸÉŸä ŸäŸÜÿ∂ŸÖ ŸÑŸÑÿπÿ®ÿ©'
         });
 } else if (session.currentPlayer === senderId) {
      const move = parseInt(text);
      if (!isNaN(move) && move >= 1 && move <= 9) {
                                         handleMultiplayerMove(sessionId, senderId, move);
  } else {
    botly.sendText({
      id: senderId,
      text: 'ÿßŸÑÿ±ÿ¨ÿßÿ° ÿßŸÑÿ•ÿÆÿ™Ÿäÿßÿ± ÿ®ŸäŸÜ 1 ÿßŸÑŸâ 9 ŸÅŸÇÿ∑ üò†'
          });
            }
      } else {
     botly.sendText({
       id: senderId,
       text: 'ŸÑŸÖ Ÿäÿ£ÿ™Ÿä ÿØŸàÿ±ŸÉ ÿ®ÿπÿØÿå ŸÖŸÜ ŸÅÿ∂ŸÑŸÉ ÿßŸÜÿ™ÿ∏ÿ± ÿ≠ÿ™Ÿâ ŸäŸÑÿπÿ® ÿµÿØŸäŸÇŸÉ.'
                            });
                           }
    } else if (text.startsWith("MOROCCOAI") && text.length === 17) {

                                     // Handle invite code
       const sessionId = Object.keys(gameSessions).find(id => gameSessions[id].inviteCode === text && gameSessions[id].player2 === null);

    if (sessionId) {
                                       gameSessions[sessionId].player2 = senderId;
     botly.sendText({
     id: gameSessions[sessionId].player1,
    text: 'ŸÇÿßŸÖ ÿµÿØŸäŸÇŸÉ ÿ®ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ ŸÑŸÑÿπÿ®ÿ© ÿπÿ®ÿ± ŸÉŸàÿØ ÿßŸÑÿØÿπŸàÿ©!\nŸäŸÖŸÉŸÜŸÉŸÖ ÿßŸÑŸÑÿπÿ® ŸÖÿπÿß ÿßŸÑÿßŸÜ\n ÿ±ŸÖÿ≤ŸÉ ŸáŸà : ‚ùå\nÿ±ŸÖÿ≤ ÿµÿØŸäŸÇŸÉ : ‚ö™'
                       });
      botly.sendText({
         id: senderId,
         text: 'ŸÇŸÖÿ™ ÿ®ÿßŸÑÿßŸÜÿ∂ŸÖÿßŸÖ ÿßŸÑŸâ ÿßŸÑŸÑÿπÿ®ÿ© ÿπÿ®ÿ± ŸÉŸàÿØ ÿßŸÑÿØÿπŸàÿ©!\n ŸäŸÖŸÉŸÜŸÉ ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿµÿØŸäŸÇŸÉ ÿßŸÑÿßŸÜ\nÿ±ŸÖÿ≤ŸÉ ŸáŸà : ‚ö™\nÿ±ŸÖÿ≤ ÿµÿØŸäŸÇŸÉ :‚ùå'
                          });
      setTimeout(() => {
       botly.sendText({
         id: gameSessions[sessionId].player1,
        text: `ÿ®ÿØÿ£ÿ™ ÿßŸÑŸÑÿπÿ®ÿ©!\n${printBoard(gameSessions[sessionId].board)}\n${gameSessions[sessionId].currentPlayer === gameSessions[sessionId].player1 ? 'ÿ≠ÿßŸÜ ÿØŸàÿ±ŸÉ! (ÿ•ÿÆÿ™ÿ± ÿ®ŸäŸÜ 1-9)' : 'ŸÅŸä ÿ•ŸÜÿ™ÿ∏ÿßÿ± ÿßŸÜ ŸäŸÑÿπÿ® ÿµÿØŸäŸÇŸÉ...'}`
             });
      }, 1000)
      setTimeout(() => {
      botly.sendText({
         id: senderId,
         text: `ÿ®ÿØÿ£ÿ™ ÿßŸÑŸÑÿπÿ®ÿ©!\n${printBoard(gameSessions[sessionId].board)}\n${gameSessions[sessionId].currentPlayer === gameSessions[sessionId].player2 ? 'ÿ≠ÿßŸÜ ÿØŸàÿ±ŸÉ! (ÿ•ÿÆÿ™ÿ± ÿ®ŸäŸÜ 1-9)' : 'ŸÅŸä ÿ•ŸÜÿ™ÿ∏ÿßÿ± ÿßŸÜ ŸäŸÑÿπÿ® ÿµÿØŸäŸÇŸÉ...'}`
                                       });}, 1000)
       } else {
       botly.sendText({
        id: senderId,
         text: 'ŸÉŸàÿØ ÿßŸÑÿØÿπŸàÿ© ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠.'
                           });
                              }
                             } else {
     botly.sendText({
      id: senderId,
      text: 'ŸÖÿ±ÿ≠ÿ®ÿß ÿ®ŸÉ ŸÅŸä ŸÑÿπÿ®ÿ© tic tac toe! \n ŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿßÿÆÿ™Ÿäÿßÿ± ÿ®ŸäŸÜ ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿßŸÑÿ®Ÿàÿ™ ÿßŸÖ ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿµÿØŸäŸÇ'
             });
 setTimeout(() => {
                    botly.sendText({
                id: senderId,
                text: 'ŸÖÿßÿ∞ÿß ÿ™ÿ±ŸäÿØ?',
                quick_replies: [
                botly.createQuickReply('ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿßŸÑÿ®Ÿàÿ™', 'RESTART'),
               botly.createQuickReply('ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿµÿØŸäŸÇ', 'INVITE_FRIEND')
                          ]
                      });}, 1000)
                     }
      } else if (message.message.attachments[0].payload.sticker_id) {
       botly.sendText({id: senderId, text: "Ÿäÿ±ÿ¨Ÿâ ÿßÿ±ÿ≥ÿßŸÑ ÿßŸÑŸÜÿµŸàÿµ ŸÅŸÇÿ∑ üò†"});
            } else if (message.message.attachments[0].type == "image") {
            botly.sendText({id: senderId, text: "Ÿäÿ±ÿ¨Ÿâ ÿßÿ±ÿ≥ÿßŸÑ ÿßŸÑŸÜÿµŸàÿµ ŸÅŸÇÿ∑ üò†"});
               } else if (message.message.attachments[0].type == "audio") {
               botly.sendText({id: senderId, text: "Ÿäÿ±ÿ¨Ÿâ ÿßÿ±ÿ≥ÿßŸÑ ÿßŸÑŸÜÿµŸàÿµ ŸÅŸÇÿ∑ üò†"});
                 } else if (message.message.attachments[0].type == "video") {
                  botly.sendText({id: senderId, text: "Ÿäÿ±ÿ¨Ÿâ ÿßÿ±ÿ≥ÿßŸÑ ÿßŸÑŸÜÿµŸàÿµ ŸÅŸÇÿ∑ üò†"});
                  }
       botly.sendAction({id: senderId, action: Botly.CONST.ACTION_TYPES.TYPING_OFF});
                               });

        botly.on("postback", async (senderId, message, postback, data, ref) => {
       botly.sendAction({id: senderId, action: Botly.CONST.ACTION_TYPES.MARK_SEEN});
       botly.sendAction({id: senderId, action: Botly.CONST.ACTION_TYPES.TYPING_ON});

      if (postback == "GET_STARTED") {
       botly.sendGeneric({id: senderId, elements: {
              title: "tic tac toe",
              image_url: "https://telegra.ph/file/77edfdf7b35823caf90f6.jpg",
              subtitle: "tic tac toe",
              buttons: [
              botly.createQuickReply("ŸÖÿ∑Ÿàÿ± ÿßŸÑÿ®Ÿàÿ™ üá≤üá¶üòÑ", "Owner"),
                    ]}, aspectRatio: Botly.CONST.IMAGE_ASPECT_RATIO.HORIZONTAL});

               setTimeout(() => {
                                  botly.sendText({
         id: senderId,
         text: 'ŸÖÿ±ÿ≠ÿ®ÿß ÿ®ŸÉ ŸÅŸä ŸÑÿπÿ®ÿ© tic tac toe! \nŸäŸÖŸÉŸÜŸÉ ÿßŸÑÿßÿÆÿ™Ÿäÿßÿ± ÿ®ŸäŸÜ ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿßŸÑÿ®Ÿàÿ™ ÿßŸÖ ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿµÿØŸäŸÇ ',
                              quick_replies: [
                              botly.createQuickReply('ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿßŸÑÿ®Ÿàÿ™', 'RESTART'),
                             botly.createQuickReply('ÿßŸÑŸÑÿπÿ® ŸÖÿπ ÿµÿØŸäŸÇ', 'INVITE_FRIEND')
                                        ]
                                    });}, 1000)
         } else if (postback == "Owner") {
          botly.sendGeneric({id: senderId, elements: {
                      title: "Morocco AI",
                      image_url: "https://telegra.ph/file/6db48bb667028c068d85a.jpg",
                     subtitle: " ÿßÿ∂ÿ∫ÿ∑ ŸÑŸÖÿ™ÿßÿ®ÿπÿ© ÿßŸÑÿµŸÅÿ≠ÿ© ‚ù§Ô∏èüëáüèª",
                    buttons: [
                    botly.createWebURLButton("ÿµŸÅÿ≠ÿ© ÿßŸÑŸÖÿ∑Ÿàÿ± üá≤üá¶üòÑ", "https://www.facebook.com/profile.php?id=100090780515885")]},
            aspectRatio: Botly.CONST.IMAGE_ASPECT_RATIO.HORIZONTAL});
         } else if (postback == "RESTART") {
                    startGame(senderId);
         } else if (postback == "INVITE_FRIEND") {
            const inviteCode = generateInviteCode();
            gameSessions[inviteCode] = {
              player1: senderId,
              player2: null,
              board: initBoard(),
              currentPlayer: senderId,
              inviteCode: inviteCode
            };
            botly.sendText({
              id: senderId,
              text: `ÿßÿ±ÿ≥ŸÑ Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ÿßŸÑŸâ ÿµÿØŸäŸÇŸÉÿå ŸàŸÇŸÑ ŸÑŸá ÿßŸÜ Ÿäÿ±ÿ≥ŸÑŸá ŸÑŸä ŸÑŸÉŸä ÿ™ŸÑÿπÿ® ŸÖÿπŸá ŸÖÿ®ÿßÿ¥ÿ±ÿ©\nÿßÿ±ÿ≥ŸÑ ŸÑŸá ÿ±ÿßÿ®ÿ∑ ÿßŸÑÿµŸÅÿ≠ÿ© ŸÑŸÉŸä Ÿäÿ±ÿßÿ≥ŸÑŸÜŸä `
            });
            setTimeout(() => {
              botly.sendText({
                id: senderId,
                text: `${inviteCode}`
              });
            }, 1000);
            setTimeout(() => {
              invalidateInviteCode(inviteCode);
            }, 1 * 60 * 1000);
          }

      botly.sendAction({id: senderId, action: Botly.CONST.ACTION_TYPES.TYPING_OFF});
                               });

      botly.setGetStarted({pageId: PageID, payload: "GET_STARTED"});
      botly.setGreetingText({
      pageId: PageID,
     greeting: [
                 {
                 locale: "default",
                 text: "tic tac toe"
                            }
                                 ]
                               });
      botly.setPersistentMenu({
                 pageId: PageID,
                 menu: [
                         {
                locale: "default",
                composer_input_disabled: false,
                call_to_actions: [
                                       {
        type:  "web_url",
        title: "ÿµŸÅÿ≠ÿ© ÿßŸÑŸÖÿ∑Ÿàÿ± üá≤üá¶üòÑ",
        url:   "fb.com/Morocco.Openai/",
       webview_height_ratio: "full"
            }
       ]
    }
     ]
    });

  const port = 8080;

 app.listen(port, () => {
 console.log(`Server running on port ${port}`);
                               });
